------------UBUNTU-SERVER------------

-----INSTALLATION OF LINUX SERVER INSIDE A VIRTUAL MACHINE, HOW TO INSTALL UBUNTU SERVER
Download https://www.virtualbox.org/
    -VDI VirtualBox Disk Image
    -Dinamically allocated
    -
Download Ubuntu Server ISO https://ubuntu.com/download/server
In virtualbox go to configuration
    -Storage
        Click on the empty cd
        Optical drive: Select virtual optical Disk and click 'ok'
    -Network 
        Attached to: Bridget adapter
        Adapeter type: pcnet-fast III(optional)
        Promiscuous modee: Allow all 
        Cable conected: selected
    -Start 


-----EXPLORING FILES
tail -f     monitor changes in a file in real time


-----PERMISSIONS
chmod u+x file.txt      it assigns execute permission to user in 'file.txt'
chmod g-0 file.txt      this removes execute permissions to the group in the 'file.txt'
chmod +x                this assigns execute permissions to all

octal mode 
r = 4
w = 2
x = 1
- = 0

-rw-r--r-- 1 neomatrix neomatrix   0 Feb 17 01:02 file.txt
chmod 644 file.txt

change owner
    -rw-r--r-- 1 neomatrix neomatrix   0 Feb 17 01:02 file.txt
sudo chown  root:root file.txt
    -rw-r--r-- 1 root      root        0 Feb 17 01:02 file.txt

ex for dierectories:
sudo chown whales:aquatic /TestUnix 


-----VIRTUAL TERMINALS 
-We can have up to 6 open terminals tty1 - tty6
ctrl + alt + f(n)     move between terminals. 
chvt + terminal number 

w                   it shows how many users are in my OS
tty                 this indicates the number of the terminal i am in.
ps -ft tty          list processes
kill + PID          this finish the process 

-----MANAGMENT AND MONITORING OF PROCESSES
ps aux                      it shows the processes running on the system 
ps aux | grep neomatrix     showing the processes of a specific user 
ctr z                       send a process to the background
jobs                        view background processes
fg                          bring in background processes

start a process but without losing the console
vi script.sh
#!/bin/bash
echo "hi"
:wq
add execution permission

./script.sh &               creates a specific background process (this allows you to continue using the console)
nohup ./script.sh           this creates an output where i can see the actions the process is doing


-----MONITORING SYSTEM RESOURCES 
top             specific information about OS processes 
cat /proc/cpuinfo | grep -i "Processor"     how many processors are in the system

free -h         it shows the memory information 

du  -hcs        hard drive state
example
du -hsc /home/neomatrix
du -hsc /

sudo ps auxf | sort -nr -k 3 | head -5      processes consuming more CPU 
sudo ps auxf | sort -nr -k 4 | head -5      processes consuming more RAM 

htop        package for a more organized managing of processes 


------NETWORK PARAMETERS 
ifconfig                its shows the network cards 
ip a                    this means ip address show 

ip -4 a 
ip -6 a                 specific type of addressing 

hostname                how i identify this host on the network 
route -n                default gateway

nslookup google.com     ip of a specific domain  
curl                    check connectivity to URLs 
wget                    retrieve content and files from various web servers, also allows downloading packages 

*sudo apt-get install net-tools
-----PACKAGE MANAGMENT ACCORDING TO THE 'DISTRO'

>>Debian / Ubuntu
sudo apt-get update         updating
sudo apt update             downlading *another way is by sudo apt dist-upgrade             
sudo apt-get upgrade  

sudo apt search "mysql$"    search for packages 
    sudo apt search "mysql-server"
    sudo snap search aws-cli

dpkg -l                     List all debs installed on the machine.
dpkg -i package.deb         Perform a package installation.
dpkg -r package.deb         Remove a package from the system.
dpkg-reconfigure tzdata     reconfigures this package

apt install package         apt repositories another way to install.


>>Red Hat / CentOS / Fedora
.rpm Red Hat Package Manager.
RPM database, located in var/lib/rpm
rpm -qa         List all rpms installed on the machine. (query all)
    rpm -qi bash
    rpm -qc bash
rpm -i package.rpm          Perform a package installation. (install)
rpm -e package.rpm          Remove a package from the system. (erase)

sudo yum update                 updating 
sudo yum install net-tools      installing a package 
rpm -e curl                     remove a package


-----NAGIOS 
Installation of some tools to manage a MySQL database (remember that we will install and work with MySQL in an upcoming class):
    sudo apt install build-essential libgd-dev openssl libssl-dev unzip apache2 php gcc libdbi-perl libdbd-mysql-perl

Nagios installation
    wget https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.4.4.tar.gz -O nagioscore.tar.gz
Unzip and unpack archives with tar:
    unzip:  tar xvzf nagioscore.tar.gz
    go to: the created folder nagios-4.4.4
configuration
    sudo ./configure --with-httpd-conf=/etc/apache2/sites-enabled
execute this 
    sudo make all
    sudo make install 
        *if error:
        sudo make install-groups-users
        sudo usermod -a -G nagios www-data
continue
    sudo make install-init
    sudo make install-commandmode
    sudo make install-config
    sudo make install-web-conf
verify installation 
    curl localhost | grep apache 
    sudo systemctl status nagios  
Activate nagios
    sudo systemctl start nagios 

-Nagios Plugins
cd 
VER="2.3.3"
curl -SL https://github.com/nagios-plugins/nagios-plugins/releases/download/release-$VER/nagios-plugins-$VER.tar.gz | tar -xzf -

In the main directory you will have an additional directory â€“ nagios-plugins-2.3.3
navigate to the directory where the plugins are located and

compile the Nagios plugins with the following commands:
    ./configure --with-nagios-user=nagios --with-nagios-group=nagios
    sudo make install
start the Nagios service
    sudo systemctl enable --now nagios
    sudo systemctl status nagios
access Nagios
    Open your web browser and go to the displayed URL.
    http://server-IP/nagios


-----USERS 
id                  Real and effective User ID (UID) and Group ID (GID)
cat /etc/passwd     OS Users 
cat /etc/shadow     User passwords 
sudo passwd root    change root password 



----CREATING AND MANAGING USERS ACCOUNTS 
sudo useradd username   Create a user without immediately assigning a password or asking for more information. We must finish configuring this account by hand later.
sudo adduser username   Create a new user with a password and some other information. It will also create a new folder in the /home/ folder.

sudo userdel username        remove user accounts.
usermod                 modify the information of some account.

Never manually modify the /etc/passwd file. 

cat /urs/sbin/adduser   to see the content of adduser


-----SWICHING USERS 
1 Creating an user
    sudo adduser nodejs
2 switch user 
    sudo su - nodejs 
3 Trying to update
    sudo apt update  *nodejs is not in the sudoers file.
4 solution
    exit 
    groups nodejs
    sudo gpasswd -a nodejs sudo
try the steps 2 and 3 again

-remove an user from a group in this case 'sudo'
    sudo gpasswd -d nodejs sudo
    or
    sudo usermod -aG sudo nodejs   *now in groups = nodejs sudo
-see what permissions this user has
    sudo -l 


-----PAM (Pluggable Authentication Modules)
*CentOS
ls /etc/pam.d
*ls /lib64/security
ls /etc/security

sudo apt install libpwquality-tools
pswcore         check the security of a password 

-Limit processes
ulimit -a       set limits that only apply to the current session
ulimit -u 10    reduce the number of processes to 10

create a script with vim   vm script.sh
    #!/bin/bash
    echo "hi there"
    $0

add execution permissions 
    chmod +x script.sh
execute
    ./script.sh 

-Limit hours
vi /etc/security/time.conf  
in the event that it does not allow the file to be modified:        
in console as root user
    gpasswd -a noe wheel        this adds to the wheel group(requires console reboot)
insert this example
    *;*;noe | anotherUser;wk0800-1800


-----SSH AUTHENTICATION 
sudo vi /etc/ssh/ssh_config         view ssh configuration 
ssh-keygen                          key generator 2048 bits default
ls .ssh

connect to a server
    ssh-copy-id -i directorio_de_llave/id_rsa.pub nombre_usuario@direccion_ip_del_servidor
execute
    nombre_usuario@direccion_ip_del_servidor
finish and start ssh
    sudo systemctl stop ssh
    sudo systemctl start ssh

ssh -v ServerName       i shows the actions between server and client



-----DNS WITH BIND 
-Installing bind
    sudo apt install aptitude
    aptitude search "?name(^bind)"
    sudo apt install -y bind9
    sudo netstat -ltnp

dig www.platzi.com @127.0.0.1       consulting a dns 
    There we will find an output, we are interested in the response 
    part and the runtime part to validate that the response was given from localhost.
dpkg -L bind9
    verify everything that is included within the package such as
    manual configuration files among others

    The main configuration file will be /etc/bind/named.conf, we also have the /etc/bind/rndc.key file 
    in which you can configure the key that can be used to gain access to the domain name.

named -v or     version of bind in two ways


-----START, STOP AND RELOAD SERVICES 
sudo systemctl status apache2                   verify if apache is running 
sudo systemctl start apache2                    init a service
sudo systemctl stop apache2                     finish a service 

sudo systemctl list-units -t service --all      list services

-admin logs
cd /var/log ls      logs
sudo journalctl -fu apache2     view apache logs
sudo journalctl --disk-usage    disk space
sudo journalctl --list-boots    list of last boots
sudo journalctl -p (critic, info, warning, error)
sudo journalctl -o json


-----NGINX AND APACHE 
NGINX and Apache on Ubuntu server

Install Apache
    sudo apt install apache2

Install Nginx
    sudo apt install nginx nginx-extras

To verify if the services are running, the following commands must be executed:
    systemctl status apache2
    systemctl status nginx

Open the Apache configuration file, and change the port to 8080
    sudo nano /etc/apache2/ports.conf

Open the following configuration file and change the port to 8080
    sudo nano /etc/apache2/sites-available/000-default.conf

Restart Apache and Start Nginx. check later
    sudo systemctl restart apache2
    sudo systemctl status apache2
    sudo systemctl start nginx
    sudo systemctl status nginx

Add the line proxy_pass http://127.0.0.1:8080 in the location of the following file
    sudo nano /etc/nginx/sites-available/default

commands
    sudo netstat -tulpn         Validate ports that have an active process


If for some reason the Apache server is not on the same machine, we must change the respective IP address and port.
Apache has a command to activate sites that is a2ensite that receives as a parameter the configuration file defined in /etc/apache2/sites-available. 
NGINX does not have this command, which is why there is a soft link, that is, 
when we create a configuration file in /etc/nginx/sites-available we must execute sudo ln -s /etc/nginx/sites-available/ nginx_config /etc/nginx/sites-enabled/

Apache also allows me to disable sites and add modules
sudo a2dissite 000-default
sudo a2enmod rewrite headers env dir mime

If we want to enable letsecrypt in NGINX, we need to add a line in the .htaccess to the path /var/www/html/host_name/.htaccess. The line is SetEnvIf X-Forwarded-Proto https


---NGINX INSTALLATION
sudo apt search nginx
sudo apt search "nginx$"
sudo apt update && sudo apt install nginx
sudo systemctl status apache2
sudo systemctl status nginx
netstat -tulpn

sudo systemctl stop apache2
sudo systemctl status apache2
netstat -tulpn

cd /etc/nginx
ls
vi ngnix.conf
cd sites-available
ls
less default
cd /var/www/html
curl localhost
curl -I localhost
cd /etc/nginx/sites-enabled/
ll


----NGINX AMPLIFY
Installation process

Install Python 2.7
sudo apt install python2.7

Move to the Nginx folder
cd /etc/nginx

Modify the conf.d file as follows
sudo cat > conf.d/stub_status.conf
server {
    listen 127.0.0.1:80;
    server_name 127.0.0.1;
    location /nginx_status {
    stub_status on;
    allow 127.0.0.1;
    deny all;
    }
}

Kill the Nginx process
sudo kill -HUP `cat /var/run/nginx.pid`

Reboot and enable Nginx
    sudo systemctl restart nginx && systemctl enable nginx

Log in to the Nginx Amplify website and follow the installation instructions: https://amplify.nginx.com and install in home:
    curl -L -O https://github.com/nginxinc/nginx-amplify-agent/raw/master/packages/install.sh
                                        or
    wget https://github.com/nginxinc/nginx-amplify-agent/raw/master/packages/install.sh

give execution permission
    ls
    chmod +x install.sh

 Run the following command as root to install the Amplify Agent package.
sudo API_KEY='ca6d2c7410be79fc9d23e83861530d3a' sh ./install.sh

Start the Nginx Amplify service
    service amplify-agent start

Restart Nginx
    sudo systemctl restart nginx


-----LOGS 
find /etc/ -type f                      find recieve a path 

find /var/log/ -name "*.log" type f     find 'logs' of type file
find /var/log/ ! -name "*.log" type f   find all files that do not have a '.log' extension
find /var/log/ -iname "*.LOG" type f    find case-insensitive

sudo find /etc/ -mtime 10               find files modified in the last 10 minutes
find /etc/ -mtime 10 2> /dev/null

grep "server" /etc/nginx/sites-available/default    find a specific word in a file

awk '{print $1}' /var/log/nginx/access.log                                  view postition 1 'ips'in this log file  
awk '{print $1}' /var/log/nginx/access.log | sort | uniq -c
awk '{print $1}' /var/log/nginx/access.log | sort | uniq -c | sort -nr 
awk '{print $9}' /var/log/nginx/access.log | sort | uniq -c | sort -nr      view errors

Nmon
Munin
Grafana


-----BASH 
vi file1.sh 
    #!/bin/bash 
    #this is a comment 
    WELCOME = "hi platzi"
    echo $WELCOME
    ls

ls -l 
chmod u+x file1.sh
ls -l 
execute script
    ./file1.sh


-----VARIABLES AND THEIR EXECUTION ENVIRONMENT
env                 view system variables
echo $PATH          binaries 
    cd /usr/local/sbin/
    cd /ur/bin/

cd 
-use those variables in the 'scripts'
    vi hd_script.sh
        #!/bin/bash
        #check hard disk space in the operating system
        #Developed by noe

        CWD=$(pwd)
        DATE=$(date +"%F%T")
        echo $DATE

        df -h | grep /dev > disk_use_"$DATE".txt
        df -h | grep /dev/mapper/ubuntu--vg-root >> disk_use_"$DATE".txt

        echo "a file has been generated at path $CWD" 
ls -l 
./hd_script.sh
ls -ltr 
cd disk_use_2022-04-1015:14:28.txt


-----AUTOMATION - backup of a MySQL database
                vi backup.sh
#!/bin/bash
#Shell script to get a copy of a MySQL database 
#Developed by noe
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

run
make_backup

function assert_is_installed {
	local readonly name="$1"
	if [[ ! $(command -v ${name})]]; then
		log_error "The binary '$name' is required but it isn't in 		our system"
		exit 1
	fi
}

function log_error {
	local readonly message "$1"
	log "ERROR" "$message"
}

function  log {
	local readonly level="$1"
	local readonly message="$2"
	local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S") >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
		
}

function run {
	assert_is_installed "mysql"
	assert_is_installed "mysqldump"
	assert_is_installed "gzip"
	assert_is_installed "aws"
}

function make_backup {
	local BAK="$(echo $HOME/mysql)"
	local MYSQL="$(which mysql)"
	local MYSQLDUMP="$(which mysqldump)"
	local GZIP="$(which gzip)"
	local NOW="$(date +"+%d-%m-%Y")"
	local BUCKET="xxxxx"
	
	USER="xxxxxx"
	PASS="xxxxxx"
	HOST="xxxxxx"
	DATABASE="xxxxxx"

	[! -d "$BAK" ] && mkdir -p "$BAK"

	FILE=$BAK/$DATABASE.$NOW-$(date +"%T").gz
	local SECONDS=0
	
	$MYSQLDUMP --single-transaction --set-gtid-purged=OFF -u $USER -p $PASS -h $HOST $DATABASE | $GZIP -9 > $FILE

	duration=$SECONDS
	echo "$($duration / 60) minutes"
	aws s3 cp $BAK "s3://$BUCKET" --recursive
}


-----CRONTAB 
CRON
    regular background process manager that checks if there are any tasks to run.
CRONTAB
    configuration file of tasks to execute

crontab -e      edit crontab file 
crontab -l      list tasks configured


minute(0-59)
hour(0-23) 
day_of_month(1-31) 
month(1-12|jan,feb,mar...) 
day_of_week(0-6|sun,mon,tue...) 
interpreter(ej:"/usr/bin/bash") command(ej:"pwd > /home/plazi/pwd.txt")

Our cron would be as follows
    15 3 * * * /usr/bin/bash /home/platzi/copia.sh

We could also do an automatic scan of the machine every day at 05:00 PM and 
generate a report of the security status of the machine with lynis
    * 17 * * * /usr/sbin/lynis --quick > /home/edison/Documentos/Platzi/lynis_files/$(date +"\%F") 2>/dev/null

We check the folder and find the output
This will work fine as long as the machine is on, if not we could check out anacron


-----VULNERABILITY MANAGMENT 
There are some commands that we should not use, since they are vulnerable by default, 
such as telnet or r* commands. 
Instead of these commands we can use secure protocols like SSH.

Bad practices
    Do not disable the root user
    Perform a login with username and password (without ssh)
    Do not validate the software version used
    Use r* or telnet commands
    Do not identify the services and open ports in the OS
    Not managing user permissions correctly

Good practices
    Check for security updates and install them.
    On CentOS:
        yum check-update --security
        yum update security
    On Ubuntu:
        apt update
        apt upgrade


-----
