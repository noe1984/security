------------UBUNTU-SERVER------------

-----INSTALLATION OF LINUX SERVER INSIDE A VIRTUAL MACHINE, HOW TO INSTALL UBUNTU SERVER
Download https://www.virtualbox.org/
    -VDI VirtualBox Disk Image
    -Dinamically allocated
    -
Download Ubuntu Server ISO https://ubuntu.com/download/server
In virtualbox go to configuration
    -Storage
        Click on the empty cd
        Optical drive: Select virtual optical Disk and click 'ok'
    -Network 
        Attached to: Bridget adapter
        Adapeter type: pcnet-fast III(optional)
        Promiscuous modee: Allow all 
        Cable conected: selected
    -Start 


-----EXPLORING FILES
tail -f     monitor changes in a file in real time


-----PERMISSIONS
chmod u+x file.txt      it assigns execute permission to user in 'file.txt'
chmod g-0 file.txt      this removes execute permissions to the group in the 'file.txt'
chmod +x                this assigns execute permissions to all

octal mode 
r = 4
w = 2
x = 1
- = 0

-rw-r--r-- 1 neomatrix neomatrix   0 Feb 17 01:02 file.txt
chmod 644 file.txt

change owner
-rw-r--r-- 1 neomatrix neomatrix   0 Feb 17 01:02 file.txt
    sudo chown  root:root file.txt
-rw-r--r-- 1 root      root        0 Feb 17 01:02 file.txt

ex for directories:
sudo chown whales:aquatic /TestUnix 
            user   group

-----VIRTUAL TERMINALS 
-We can have up to 6 open terminals tty1 - tty6
ctrl + alt + f(n)     move between terminals. 
chvt + terminal number 

w                   it shows how many users are in my OS
tty                 this indicates the number of the terminal i am in.
ps -ft tty          list processes
kill + PID          this finish the process 

-----MANAGMENT AND MONITORING OF PROCESSES
ps aux                      it shows the processes running on the system 
ps aux | grep neomatrix     showing the processes of a specific user 
ctr z                       send a process to the background
jobs                        view background processes
fg                          bring in background processes

start a process but without losing the console
vi script.sh
#!/bin/bash
echo "hi"
:wq
add execution permission

./script.sh &               creates a specific background process (this allows you to continue using the console)
nohup ./script.sh           this creates an output where i can see the actions the process is doing


-----MONITORING SYSTEM RESOURCES 
top             specific information about OS processes 
cat /proc/cpuinfo | grep -i "Processor"     how many processors are in the system

free -h         it shows the memory information 

du  -hcs        hard drive state
example
du -hsc /home/neomatrix
du -hsc /

sudo ps auxf | sort -nr -k 3 | head -5      processes consuming more CPU 
sudo ps auxf | sort -nr -k 4 | head -5      processes consuming more RAM 

htop        package for a more organized managing of processes 


------NETWORK PARAMETERS 
ifconfig                its shows the network cards 
ip a                    this means ip address show 

ip -4 a 
ip -6 a                 specific type of addressing 

hostname                how i identify this host on the network 
route -n                default gateway

nslookup google.com     ip of a specific domain  
curl                    check connectivity to URLs 
wget                    retrieve content and files from various web servers, also allows downloading packages 

*sudo apt-get install net-tools
-----PACKAGE MANAGMENT ACCORDING TO THE 'DISTRO'

>>Debian / Ubuntu
sudo apt-get update         updating
sudo apt update             downlading *another way is by sudo apt dist-upgrade             
sudo apt-get upgrade  
*sudo apt-dist upgrade      requires reboot 

search for specific packages
    sudo apt search "mysql$"   
    sudo apt search "mysql-server$"

    sudo snap search aws-cli
    sudo snap info aws-cli

packages installed on the system
    dpkg -l                     List all debs installed on the machine.
    dpkg -i package.deb         Perform a package installation.
    dpkg -r package.deb         Remove a package from the system.
    dpkg-reconfigure tzdata     reconfigures this package

apt install package         apt repositories, another way to install.


>>Red Hat / CentOS / Fedora
.rpm Red Hat Package Manager.
RPM database, located in var/lib/rpm
rpm -qa         List all rpms installed on the machine. (query all)
    rpm -qi bash
    rpm -qc bash
rpm -i package.rpm          Perform a package installation. (install)
rpm -e package.rpm          Remove a package from the system. (erase)

sudo yum update                 updating 
sudo yum install net-tools      installing a package 
rpm -e curl                     remove a package


-----NAGIOS 
Installation of some tools to manage a MySQL database (remember that we will install and work with MySQL in an upcoming class):
    sudo apt install build-essential libgd-dev openssl libssl-dev unzip apache2 php gcc libdbi-perl libdbd-mysql-perl

Nagios installation
    wget https://assets.nagios.com/downloads/nagioscore/releases/nagios-4.4.4.tar.gz -O nagioscore.tar.gz
Unzip and unpack archives with tar:
    unzip:  tar xvzf nagioscore.tar.gz
    go to: the created folder nagios-4.4.4
configuration
    sudo ./configure --with-httpd-conf=/etc/apache2/sites-enabled
execute this 
    sudo make all
    sudo make install 
        *if error:
        sudo make install-groups-users
        sudo usermod -a -G nagios www-data
continue
    sudo make install-init
    sudo make install-commandmode
    sudo make install-config
    sudo make install-web-conf
verify installation 
    curl localhost | grep apache 
    sudo systemctl status nagios  
Activate nagios
    sudo systemctl start nagios 

-Nagios Plugins
cd 
VER="2.3.3"
curl -SL https://github.com/nagios-plugins/nagios-plugins/releases/download/release-$VER/nagios-plugins-$VER.tar.gz | tar -xzf -

In the main directory you will have an additional directory â€“ nagios-plugins-2.3.3
navigate to the directory where the plugins are located and

compile the Nagios plugins with the following commands:
    ./configure --with-nagios-user=nagios --with-nagios-group=nagios
    sudo make install
start the Nagios service
    sudo systemctl enable --now nagios
    sudo systemctl status nagios
access Nagios
    Open your web browser and go to the displayed URL.
    http://server-IP/nagios



------USERS 
Debian 1000 >
id          user id 
whoami      user 

cat /etc/passwd         all OS user 
    x  it means that the password is encrypted elsewhere.
sudo cat /etc/shadow    it shows passwords 
passwd + user           this allows change passwords 


------CREATING AND MANAGING USER ACCOUNTS 
-create users 
sudo useradd "someuser"       doesn't ask for password, and doesn't create a home 
    cat /etc/passwd         verify that user was created

sudo adduser "someuser"       it asks for passwords and create a home 

-delete users 
    sudo userdel "someuser" 

-modify users 
    sudo usermod "someuser" 

-switchin user 
    sudo su - "someuser"                  switch to "someuser" 
-adding to groups 
    sudo gpasswd -a "someuser" sudo       add to sudo group 
-removing from groups
    sudo gpasswd -d "someuser" sudo 
    grupos "someuser"                     verify groups 
sudo -l                                   view permissions 


-----PAM  Pluggable Authentication Modules (PAM) 
--CentOS 
ls /etc/pam.d 
ls /lib64/security/
ls /etc/security 

pswcore                     validate the strength of a password
-number of processes 
    ulimit -u "n"           limit number of processes
-time of login 
    if doesn't have permission
        gpasswd -a platzi wheel 
    sudo vi /etc/security/time.cong
        *;*;someuser|otheruser;wk0800-1800


------SSH CLIENT AND SERVER AUTHENTICATION
sudo /etc/ssh/sshd_config           ssh config 
ssh-keygen 
ls .ssh                             view ssh files
-connect with server
    ssh-copy-id -i ~/.ssh/id_rsa.pub    server@serverip                  
-automatic login 
    ssh server@ipserver 
-change password login in config 
    passwordAuthentication "no"
    sudo systemctl stop ssh
    sudo systemctl start ssh
ssh -v server@serverip                  server-client interaction

-----BIND DNS CONFIG 
sudo apt install aptitude
apt install -y bind9

We validate the installation with netstat and verify that port 53 is listening
    program executing service 
    sudo netstat -ltnp
query example
    dig www.platzi.com @127.0.0.1
check what is included in the package
    dpkg -L bind9
The main configuration file will be 
    /etc/bind/named.conf
in this you can configure the key that can be used to gain access to the domain name
    /etc/bind/rndc.key
We can see the version of bind in two ways named -v or an extended version with named -V

If you want to acquire your DNS, you have several options:
    namecheap
    Hover
    Route 53
As a client you have several options to configure your DNS, which will directly influence your speed, security or reputation. 
For that I will give you some options, the order does not mean anything:
    opendns
    google-dns
    Neustar UltraDNS
    cloudflare
    ATV
    PublicDNS
    Yandex-DNS
There is a tool that allows us to select which DNS we should use based on our location and our searches, it is called namebench.



------START, STOP AND RELOAD SERVICES 
sudo systemctl status apache2       service status 
sudo systemctl enable apache2       enable service 

sudo systemctl stop apache2 
sudo systemctl start apache2

sudo systemctl list-unit -t service --all       list of services
cd /var/log/
    sudo journalctl -fu apache2     service details like errors
    sudo journalctl --disk-usage 
    sudo journalctl --list-boots 
    sudo journalctl -p (info, warning, crit ) 
    sudo journalctl -o json



---NGINX INSTALLATION
sudo apt search nginx
sudo apt search "nginx$"

installing nginx
    sudo apt update && sudo apt install nginx
    sudo systemctl status apache2
    sudo systemctl status nginx
    netstat -tulpn

if port 80 is already in use 
    netstat -tulpn                  tcp udp listening numeric
    sudo systemctl stop apache2
    sudo systemctl status apache2

sudo systemctl start nginx 
sudo systemctl status nginx

edit nginx files
    cd /etc/nginx
        vi ngnix.conf                   modify access-error logs, compression, processes to launch etc
    cd sites-available
        less default                    active services
        cd /var/www/html
            curl localhost
                vi /etc/nginx/sites-available/default   to see the reading order
            curl -I localhost                           headers of the server that is responding in this case nginx 
    cd /etc/nginx/sites-enabled/                        activated sites
    ll


----NGINX AMPLIFY
Installation process

Install Python 'current version'
sudo apt install python'current version' 

Move to the Nginx folder
cd /etc/nginx

Modify the conf.d file as follows
sudo cat > conf.d/stub_status.conf
server {
    listen 127.0.0.1:80;
    server_name 127.0.0.1;
    location /nginx_status {
    stub_status on;
    allow 127.0.0.1;
    deny all;
    }
}

Kill the Nginx process
sudo kill -HUP `cat /var/run/nginx.pid`

Reboot and enable Nginx
    sudo systemctl restart nginx && systemctl enable nginx

Log in to the Nginx Amplify website and follow the installation instructions: https://amplify.nginx.com and install in home:
    curl -L -O https://github.com/nginxinc/nginx-amplify-agent/raw/master/packages/install.sh
                                        or
    wget https://github.com/nginxinc/nginx-amplify-agent/raw/master/packages/install.sh

give execution permission
    ls
    chmod +x install.sh

 Run the following command as root to install the Amplify Agent package.
sudo API_KEY='ca6d2c7410be79fc9d23e83861530d3a' sh ./install.sh

Start the Nginx Amplify service
    service amplify-agent start

Restart Nginx
    sudo systemctl restart nginx



------MySQL MONITORING WITH NAGIOS
sudo apt search mysql   or
sudo apt search "mysql-server$"

sudo apt install mysql-server
mysql   "access denied for user"

-get mysql password
    sudo vim /etc/mysql/debian.cnf"
        copy password
    mysql -u debian-sys-maint -p        if host is in another machine -h *debian-sys-maint=user
            enter password 
    show databases;
    exit 

-secure installation 
sudo mysql_secure_installation
    validate password y 
    remove anonymous user y
    remove login remote y
    remove test database y 
    reload privilege tables y 
    all done 
sudo mysql      now is connected 

-configure nagios 
sudo systemctl status apache2       check apache
sudo a2enmod rewrite cgi      

create a nagios user
    /usr/local/nagios/etc/htpasswd.users nagiosadmin 
    enter a password
    sudo systemctl restart apache2

enter nagios in browser
server ip address:8080/nagios

-nagios Plugins
wget https://nagios-plugins.org/download/nagios-plugins-2.2.1.tar.gz -Or nagios-plugins.tar.gz
tar xzvf nagios-plugins.tar.gz
cd nagios-plugins-2.2.1
    sudo ./configure
    sudo make all
    sudo make install
    sudo /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg       verify errors 

In our home, download the MySQL plugin
wget https://labs.consol.de/assets/downloads/nagios/check_mysql_health-2.2.2.tar.gz -O mysqlplugin.tar.gz

tar xzvf mysqlplugin.tar.gz


------NAGIOS CONFIGURATION 
sudo mysql 

-Inside the MySQL console, create a user.
grant select on *.* to 
CREATE USER â€˜nagiosâ€™@â€˜localhostâ€™ IDENTIFIED BY â€˜nagiosplatziS14*â€™;
GRANT ALL PRIVILEGES ON *.* TO â€˜nagiosâ€™@â€˜localhostâ€™;
FLUSH PRIVILEGES;

-configure
sudo vim /usr/local/nagios/etc/nagios.cfg
#Already inside the file, add the following line:
cfg_file=/usr/local/nagios/etc/objects/mysqlmonitoring.cfg
exit

-Create commands to make use of Nagios
sudo vim /usr/local/nagios/etc/objects/commands.cfg
#Already inside the file, add the following lines:

define command {
command_name check_mysql_health
command_line $USER1$/check_mysql_health -H $ARG4$ --username $ARG1$ --password $ARG2$ --port $ARG5$ --mode $ARG3$
}

-Create the file that we named in the configuration in the nagios.cfg file
sudo vim /usr/local/nagios/etc/objects/mysqlmonitoring.cfg
#Already in the file, add the following lines

define service {
use local-service
host_name localhost
service_description MySQL connection-time
check_command check_mysql_health!nagios!nagiosplatziS14*!connection-time!127.0.0.1!3306!
}

sudo systemctl restart nagios



-----LOGS 
find /etc/ -type f                      'find' command recieves a path 

find /var/log/ -name "*.log" type f     find 'logs' of type file
find /var/log/ ! -name "*.log" type f   find all files that do not have a '.log' extension
find /var/log/ -iname "*.LOG" type f    find case-insensitive

sudo find /etc/ -mtime 10               find files modified in the last 10 minutes
find /etc/ -mtime 10 2> /dev/null

grep "server" /etc/nginx/sites-available/default    find a specific word in a file

awk '{print $1}' /var/log/nginx/access.log                                  view postition 1 'ips'in this log file  
awk '{print $1}' /var/log/nginx/access.log | sort | uniq -c
awk '{print $1}' /var/log/nginx/access.log | sort | uniq -c | sort -nr 
awk '{print $9}' /var/log/nginx/access.log | sort | uniq -c | sort -nr      view errors

Nmon
Munin
Grafana


-----BASH 
vi file1.sh 
    #!/bin/bash 
    #this is a comment 
    WELCOME = "hi platzi"
    echo $WELCOME
    ls

ls -l 
chmod u+x file1.sh
ls -l 
execute script
    ./file1.sh


-----VARIABLES AND THEIR EXECUTION ENVIRONMENT
env                 view system variables
echo $PATH          binaries 
    cd /usr/local/sbin/
    cd /ur/bin/

cd 
-use those variables in the 'scripts'
    vi hd_script.sh
        #!/bin/bash
        #check hard disk space in the operating system
        #Developed by noe

        CWD=$(pwd)
        DATE=$(date +"%F%T")
        echo $DATE

        df -h | grep /dev > disk_use_"$DATE".txt
        df -h | grep /dev/mapper/ubuntu--vg-root >> disk_use_"$DATE".txt

        echo "a file has been generated at path $CWD" 
ls -l 
./hd_script.sh
ls -ltr 
cd disk_use_2022-04-1015:14:28.txt


-----AUTOMATION - backup of a MySQL database
                vi backup.sh
#!/bin/bash
#Shell script to get a copy of a MySQL database 
#Developed by noe
PATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin

readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly SCRIPT_NAME="$(basename "$0")"

run
make_backup

function assert_is_installed {
	local readonly name="$1"
	if [[ ! $(command -v ${name})]]; then
		log_error "The binary '$name' is required but it isn't in 		our system"
		exit 1
	fi
}

function log_error {
	local readonly message "$1"
	log "ERROR" "$message"
}

function  log {
	local readonly level="$1"
	local readonly message="$2"
	local readonly timestamp=$(date +"%Y-%m-%d %H:%M:%S") >&2 echo -e "${timestamp} [${level}] [$SCRIPT_NAME] ${message}"
		
}

function run {
	assert_is_installed "mysql"
	assert_is_installed "mysqldump"
	assert_is_installed "gzip"
	assert_is_installed "aws"
}

function make_backup {
	local BAK="$(echo $HOME/mysql)"
	local MYSQL="$(which mysql)"
	local MYSQLDUMP="$(which mysqldump)"
	local GZIP="$(which gzip)"
	local NOW="$(date +"+%d-%m-%Y")"
	local BUCKET="xxxxx"
	
	USER="xxxxxx"
	PASS="xxxxxx"
	HOST="xxxxxx"
	DATABASE="xxxxxx"

	[! -d "$BAK" ] && mkdir -p "$BAK"

	FILE=$BAK/$DATABASE.$NOW-$(date +"%T").gz
	local SECONDS=0
	
	$MYSQLDUMP --single-transaction --set-gtid-purged=OFF -u $USER -p $PASS -h $HOST $DATABASE | $GZIP -9 > $FILE

	duration=$SECONDS
	echo "$($duration / 60) minutes"
	aws s3 cp $BAK "s3://$BUCKET" --recursive
}


-----CRONTAB 
CRON
    regular background process manager that checks if there are any tasks to run.
CRONTAB
    configuration file of tasks to execute

crontab -e      edit crontab file 
crontab -l      list tasks configured


minute(0-59)
hour(0-23) 
day_of_month(1-31) 
month(1-12|jan,feb,mar...) 
day_of_week(0-6|sun,mon,tue...) 
interpreter(ej:"/usr/bin/bash") command(ej:"pwd > /home/plazi/pwd.txt")

Our cron would be as follows
    15 3 * * * /usr/bin/bash /home/platzi/copia.sh

We could also do an automatic scan of the machine every day at 05:00 PM and 
generate a report of the security status of the machine with lynis
    * 17 * * * /usr/sbin/lynis --quick > /home/edison/Documentos/Platzi/lynis_files/$(date +"\%F") 2>/dev/null

We check the folder and find the output
This will work fine as long as the machine is on, if not we could check out anacron


-----VULNERABILITY MANAGMENT 
There are some commands that we should not use, since they are vulnerable by default, 
such as telnet or r* commands. 
Instead of these commands we can use secure protocols like SSH.

Bad practices
    Do not disable the root user
    Perform a login with username and password (without ssh)
    Do not validate software version used
    Use r* or telnet commands
    Do not identify the services and open ports in the OS
    Not managing user permissions correctly

Good practices
    Check for security updates and install them.
    On CentOS:
        yum check-update --security
        yum update security
    On Ubuntu:
        apt update
        apt upgrade


-----FIREWALL ANT ITS RULES
check firewall status
    sudo ufw status
enable port 
    sudo ufw allow 22 comment 'ssh'
    sudo ufw enable 
view and change rules 
    sudo ufw status numbered
    sudo ufw delete (number 2 in this case)
restrict the service only to a certain ip (new rule)
    sudo ufw allow from 192.168.10.127 proto tcp to any port 22 comment 'allow ssh ip'
delete rules
    sudo ufw reset 

*uniq ports that should be open 
    80  http 
    443 https 

To ban a specific IP:
    sudo ufw insert 1 deny from {IP} comment 'Attacker ip blocked'

To ban a network:
    sudo ufw insert 1 deny from {IP}/{range} comment 'Attacker ip blocked'



------SCANNING WITH NMPA AND NIKTO FROM KALI LINUX
nmap [Scan Type(s)] [Options] {target specification}

-sV Service/version info (Information about open ports).
-sC Allows you to use the script engine.
-O Enables OS detection.
-p- Scan all ports.
-oA Send the output to a file

Server IP scan
    nmap -sV -sC -O -oA <filename> <server IP>
Scan for additional vulnerability information
    nikto -h <Server IP> -o file.txt



------LYNIS - Linux security audit
sudo apt search lynis 
sudo apt install lynis 
sudo apt lynis audit system 



-----NODE - Productive environment
Clone the repository needed to make the class
    git clone https://github.com/edisoncast/linux-platzi

Install Node.js and npm
    sudo apt install nodejs npm

Positioned at home, download Node 10
    curl -sL https://deb.nodesource.com/setup_10.x -o node_setup.sh

Install Node 10
    sudo bash node_setup.sh

Install gcc, g++ and make
    sudo apt install gcc g++ make

Finish the Node version 10 installation process
    sudo apt install -y nodejs

Add the nodejs user if you haven't created it yet
    sudo adduser nodejs

In the linux-platzi folder, run the file server.js
    node server.js

Create a configuration file for the Node service
    sudo vim /lib/systemd/system/platzi@.service

# Once the file is created, fill it with the following information

[Units]
Description=Load Balancing for Platzi
Documentation=https://github.com/edisoncast/linux-platzi
After=network.target

[Service]
Environment=PORT=%i
type=simple
User=nodejs
WorkingDirectory=/home/nodejs/server
ExecStart=/usr/bin/node /home/nodejs/server/server.js
Restart-on=failure

[Install]
WantedBy=multi-user.target



----NGINX - configuration for the Node.js application
NGINX configuration for the Node.js application

Change user to nodejs
    sudo su - nodejs
Clone the repository needed for the class
    git clone https://github.com/edisoncast/linux-platzi
Rename the folder from linux-platzi to server
Fix bugs in service configuration file at /lib/systemd/system/platzi@.service
Start the service (we must be in the /server/server_configuration/bash folder)
    ./enable.sh
    ./start.sh
Start the Nginx service (Shut down Apache first if necessary)
    sudo systemctl start nginx
Once in the /etc/nginx/sites-available/ folder delete the content of the Nginx configuration
    sudo truncate -s0 default
Edit the configuration file
    sudo vim default

# Once in the file, write the following

server {
listen 80 default_server;
listen [::]:80 default_server;

server_name _;

location / {
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
proxy_set_header Host $host;
proxy_http_version 1.1;
proxy_pass http://backend;
}
}

upstream backend {
server127.0.0.1:3000;
server127.0.0.1:3001;
server127.0.0.1:3002;
server127.0.0.1:3003;
}
We validate that the established configuration was correct
sudo nginx -t
We restart nginx
sudo systemctl restart nginx
We test everything by curling to localhost
curl localhost